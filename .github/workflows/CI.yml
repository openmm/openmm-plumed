name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
  schedule:
    # Run every Sunday at midnight
    - cron:  '0 0 * * 0'

defaults:
  run:
    shell: bash -l {0}

jobs:
  unix:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
        # Latest supported versions
          - name: Linux (CUDA 11.8, OpenMM 8.0, PLUMED 2.7, Python 3.10)
            os: ubuntu-22.04
            cuda-version: "11.8.0"
            gcc-version: "11.3"
            nvcc-version: "11.8"
            openmm-version: "8.0"
            plumed-version: "2.7"
            python-version: "3.10"

        # Oldest supported versions
          - name: Linux (CUDA 11.2, OpenMM 7.7, PLUMED 2.7, Python 3.9)
            os: ubuntu-22.04
            cuda-version: "11.2.2"
            gcc-version: "10.4"
            nvcc-version: "11.2"
            openmm-version: "7.7"
            plumed-version: "2.7"
            python-version: "3.9"

          - name: MacOS Intel CPU OpenCL Python 3.9
            os: macos-12
            python-version: "3.9"

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Install CUDA Toolkit (if needed)
        if: startsWith(matrix.os, 'ubuntu')
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: ${{ matrix.cuda-version }}
          linux-local-args: '["--toolkit", "--override"]' # Need to install CUDA 10.2

      - name: Install MacOS SDK (if needed)
        if: startsWith(matrix.os, 'macos')
        run: source devtools/scripts/install_macos_sdk.sh

      - name: Prepare dependencies (if needed)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sed -i -e "/cudatoolkit/c\  - cudatoolkit ${{ matrix.cuda-version }}" \
                 -e "/gxx_linux-64/c\  - gxx_linux-64 ${{ matrix.gcc-version }}" \
                 -e "/nvcc_linux-64/c\  - nvcc_linux-64 ${{ matrix.nvcc-version }}" \
                 -e "/openmm/c\  - openmm ${{ matrix.openmm-version }}" \
                 -e "/plumed/c\  - plumed ${{ matrix.plumed-version }}" \
                 -e "/python/c\  - python ${{ matrix.python-version }}" \
                 devtools/conda-envs/build-${{ matrix.os }}.yml

      - name: Install dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: build
          environment-file: devtools/conda-envs/build-${{ matrix.os }}.yml
          auto-activate-base: false
          channels: conda-forge

      - name: Conda info
        run: |
          conda info -a
          conda list

      - name: Patch Plumed's Lepton
        run: |
          test -d ${CONDA_PREFIX}/include/plumed/lepton && mv ${CONDA_PREFIX}/include/plumed/lepton ${CONDA_PREFIX}/include/plumed/lepton.bak

      - name: Configure, compile, and install
        run: |
          mkdir build && cd build

          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
            -DOPENMM_DIR=${CONDA_PREFIX} \
            -DPLUMED_INCLUDE_DIR=${CONDA_PREFIX}/include/plumed \
            -DPLUMED_LIBRARY_DIR=${CONDA_PREFIX}/lib \

          make install
          make PythonInstall

      - name: Plugin information
        run: |
          python -c "import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"

      - name: Test C++
        run: |
          cd build
          ctest -V -E TestCuda

      - name: Test Python
        run: |
          cd python/tests
          pytest -v Test*
