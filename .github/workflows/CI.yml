name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
  schedule:
    # Nightly tests run on master by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 0 * * *"


jobs:
  unix:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux CPU CUDA 11.8 Python 3.10
            os: ubuntu-22.04
            python-version: "3.10"
            gcc-version: "9"
            cuda-version: "11.8.0"
            cdt-name: cos7  # CentOS sysroot: cuda 10.x needs cos6, 11+ needs cos7
            CMAKE_FLAGS: |
              -DPLUMED_BUILD_CUDA_LIB=ON \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
              -DEXTRA_COMPILE_FLAGS="-L/usr/local/cuda/lib64/stubs -Wl,-rpath,/usr/local/cuda/lib64/stubs -Wl,-rpath-link,/usr/local/cuda/lib64/stubs"

          - name: MacOS Intel CPU OpenCL Python 3.9
            os: macos-latest
            python-version: "3.9"
            CMAKE_FLAGS: ""

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Install CUDA Toolkit (if needed)
        if: startsWith(matrix.os, 'ubuntu')
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: ${{ matrix.cuda-version }}
          linux-local-args: '["--toolkit", "--override"]' # Need to install CUDA 10.2

      - name: Install MacOS SDK (if needed)
        if: startsWith(matrix.os, 'macos')
        run: source devtools/scripts/install_macos_sdk.sh

      - name: "Patch conda env (if needed)"
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sed -i -e "s/@CDT_NAME@/${{ matrix.cdt-name }}/g" \
                 -e "s/@GCC_VERSION@/${{ matrix.gcc-version }}.*/g" \
                 -e "s/@CUDATOOLKIT_VERSION@/${{ matrix.cuda-version }}.*/g" \
                 devtools/conda-envs/build-${{ matrix.os }}.yml

      - uses: conda-incubator/setup-miniconda@v2
        name: "Prepare base dependencies"
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: build
          environment-file: devtools/conda-envs/build-${{ matrix.os }}.yml
          auto-activate-base: false
          channels: conda-forge

      - name: "Conda info"
        shell: bash -l {0}
        run: |
          conda info -a
          conda list

      - name: Patch Plumed's Lepton location
        shell: bash -l {0}
        run: |
          test -d ${CONDA_PREFIX}/include/plumed/lepton && mv ${CONDA_PREFIX}/include/plumed/lepton ${CONDA_PREFIX}/include/plumed/lepton.bak

      - name: "Configure build with CMake"
        shell: bash -l {0}
        run: |
          mkdir build
          cd build

          SHLIB_EXT=".so"
          if [[ ${{ matrix.os }} == macos-* ]]; then
            SHLIB_EXT=".dylib"
          fi

          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
            -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENMM_DIR=${CONDA_PREFIX} \
            -DPLUMED_INCLUDE_DIR=${CONDA_PREFIX}/include/plumed \
            -DPLUMED_LIBRARY_DIR=${CONDA_PREFIX}/lib \
            -DPLUMED_BUILD_OPENCL_LIB=ON \
            -DOPENCL_INCLUDE_DIR=${CONDA_PREFIX}/include \
            -DOPENCL_LIBRARY=${CONDA_PREFIX}/lib/libOpenCL${SHLIB_EXT} \
            ${{ matrix.CMAKE_FLAGS }}

      - name: "Build"
        shell: bash -l {0}
        run: |
          cd build
          make -j2 install
          make -j2 PythonInstall

      - name: "Plugin information"
        shell: bash -l {0}
        run: |
          python -c "import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"

      - name: "Test C++"
        shell: bash -l {0}
        run: |
          set +e
          cd build
          if [[ ${{ matrix.os }} == ubuntu-* ]]; then
            test_files=$(find . -name "Test*" -executable -type f)
          else
            test_files=$(find . -name "Test*" -perm +0111 -type f)
          fi
          summary=""
          exitcode=0
          for f in $test_files; do
            fn=$(basename $f)
            echo "::group::$fn"
            summary+="\n${fn}: "
            if [[ $fn == *Cuda* ]]; then
              echo "Skipping $fn..."
              summary+="Skipped"
              echo "::endgroup::"
              continue
            fi
            echo "Running $fn..."
            ./${f}
            thisexitcode=$?
            if [[ $thisexitcode == 0 ]]; then summary+="OK"; else summary+="FAILED"; fi
            ((exitcode+=$thisexitcode))
            echo "::endgroup::"
          done
          echo "-------"
          echo "Summary"
          echo "-------"
          echo -e "${summary}"
          exit $exitcode

      - name: "Test Python"
        shell: bash -l {0}
        run: |
          cd python/tests
          pytest -v Test*
